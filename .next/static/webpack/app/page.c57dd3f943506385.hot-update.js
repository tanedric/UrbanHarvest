"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/store.ts":
/*!**********************!*\
  !*** ./lib/store.ts ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dummyFarms: function() { return /* binding */ dummyFarms; },\n/* harmony export */   useAuthStore: function() { return /* binding */ useAuthStore; },\n/* harmony export */   useCartStore: function() { return /* binding */ useCartStore; },\n/* harmony export */   useFarmStore: function() { return /* binding */ useFarmStore; },\n/* harmony export */   useOrderStore: function() { return /* binding */ useOrderStore; },\n/* harmony export */   useReviewStore: function() { return /* binding */ useReviewStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n\n\n// Add a timestamp to localStorage keys to prevent session bleeding between browsers\nconst SESSION_ID = Date.now().toString();\nconst useCartStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set)=>({\n        items: [],\n        addToCart: (item)=>set((state)=>{\n                const existingItem = state.items.find((i)=>i.id === item.id);\n                if (existingItem) {\n                    return {\n                        items: state.items.map((i)=>i.id === item.id ? {\n                                ...i,\n                                quantity: i.quantity + item.quantity\n                            } : i)\n                    };\n                }\n                return {\n                    items: [\n                        ...state.items,\n                        item\n                    ]\n                };\n            }),\n        removeFromCart: (itemId)=>set((state)=>({\n                    items: state.items.filter((item)=>item.id !== itemId)\n                })),\n        updateQuantity: (itemId, quantity)=>set((state)=>({\n                    items: state.items.map((item)=>item.id === itemId ? {\n                            ...item,\n                            quantity\n                        } : item)\n                })),\n        clearCart: ()=>set({\n                items: []\n            })\n    }), {\n    name: \"cart-storage-\".concat(SESSION_ID)\n}));\n// Dummy users for testing\nconst dummyUsers = [\n    {\n        id: \"1\",\n        name: \"John Customer\",\n        email: \"customer@example.com\",\n        password: \"password123\",\n        role: \"customer\"\n    },\n    {\n        id: \"2\",\n        name: \"Green Roof Gardens\",\n        email: \"farm@example.com\",\n        password: \"farm123\",\n        role: \"farmer\"\n    }\n];\nconst useAuthStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set)=>({\n        user: null,\n        isAuthenticated: false,\n        login: async (email, password)=>{\n            // Simulate API call\n            return new Promise((resolve, reject)=>{\n                setTimeout(()=>{\n                    const user = dummyUsers.find((u)=>u.email === email && u.password === password);\n                    if (user) {\n                        const { password, ...userWithoutPassword } = user;\n                        set({\n                            user: userWithoutPassword,\n                            isAuthenticated: true\n                        });\n                        resolve();\n                    } else {\n                        reject(new Error(\"Invalid email or password\"));\n                    }\n                }, 500);\n            });\n        },\n        logout: ()=>set({\n                user: null,\n                isAuthenticated: false\n            })\n    }), {\n    name: \"auth-storage-\".concat(SESSION_ID)\n}));\n// Create a shared storage key for orders that will be the same across all sessions\nconst SHARED_ORDERS_KEY = \"shared-orders-storage\";\nconst useOrderStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set, get)=>({\n        orders: [],\n        lastUpdated: Date.now(),\n        createOrder: (orderData)=>{\n            const newOrder = {\n                ...orderData,\n                id: \"order-\".concat(Date.now()),\n                createdAt: new Date(),\n                updatedAt: new Date()\n            };\n            set((state)=>({\n                    orders: [\n                        ...state.orders,\n                        newOrder\n                    ],\n                    lastUpdated: Date.now()\n                }));\n            return newOrder;\n        },\n        updateOrderStatus: (orderId, status, currentLocation)=>{\n            set((state)=>({\n                    orders: state.orders.map((order)=>order.id === orderId ? {\n                            ...order,\n                            status,\n                            updatedAt: new Date(),\n                            currentLocation: currentLocation || order.currentLocation\n                        } : order),\n                    lastUpdated: Date.now()\n                }));\n        },\n        getOrdersByFarm: (farmId)=>{\n            return get().orders.filter((order)=>order.farmId === farmId);\n        },\n        getCustomerOrders: (customerId)=>{\n            // In a real app, we would filter by customer ID\n            // For this demo, we'll return all orders since we don't have customer IDs\n            return get().orders;\n        },\n        checkForUpdates: ()=>{\n            // Check localStorage for updates from other sessions\n            try {\n                const storedData = localStorage.getItem(SHARED_ORDERS_KEY);\n                if (storedData) {\n                    const parsedData = JSON.parse(storedData);\n                    if (parsedData.state && parsedData.state.lastUpdated > get().lastUpdated) {\n                        // Only update if the stored data is newer\n                        set({\n                            orders: parsedData.state.orders,\n                            lastUpdated: parsedData.state.lastUpdated\n                        });\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error checking for updates:\", error);\n            }\n        }\n    }), {\n    name: SHARED_ORDERS_KEY\n}));\n// Create a shared storage key for reviews that will be the same across all sessions\nconst SHARED_REVIEWS_KEY = \"shared-reviews-storage\";\nconst useReviewStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set, get)=>({\n        reviews: [],\n        lastUpdated: Date.now(),\n        addReview: (reviewData)=>{\n            const newReview = {\n                ...reviewData,\n                id: \"review-\".concat(Date.now()),\n                createdAt: new Date()\n            };\n            set((state)=>({\n                    reviews: [\n                        ...state.reviews,\n                        newReview\n                    ],\n                    lastUpdated: Date.now()\n                }));\n        },\n        getFarmReviews: (farmId)=>{\n            return get().reviews.filter((review)=>review.farmId === farmId);\n        },\n        checkForUpdates: ()=>{\n            // Check localStorage for updates from other sessions\n            try {\n                const storedData = localStorage.getItem(SHARED_REVIEWS_KEY);\n                if (storedData) {\n                    const parsedData = JSON.parse(storedData);\n                    if (parsedData.state && parsedData.state.lastUpdated > get().lastUpdated) {\n                        // Only update if the stored data is newer\n                        set({\n                            reviews: parsedData.state.reviews,\n                            lastUpdated: parsedData.state.lastUpdated\n                        });\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error checking for updates:\", error);\n            }\n        }\n    }), {\n    name: SHARED_REVIEWS_KEY\n}));\n// Dummy farms data\nconst dummyFarms = [\n    {\n        id: \"1\",\n        name: \"Citiponics Urban Vertical Farm\",\n        slug: \"Citiponics-Urban-Vertical-Farm\",\n        description: \"Rooftop farm specializing in heirloom tomatoes and leafy greens.\",\n        image: \"https://vulcanpost.com/wp-content/uploads/2020/06/Danielle-2.jpg\",\n        location: \"Downtown\",\n        address: \"700 Ang Mo Kio Ave 6, Level 6 Multi-Storey Carpark, Singapore 560700\",\n        phone: \"(555) 123-4567\",\n        email: \"farm@example.com\",\n        rating: 4.8,\n        reviewCount: 42,\n        story: \"Green Roof Gardens started in 2015 when we transformed an unused rooftop into a thriving urban farm. Our mission is to bring fresh, locally grown produce to city dwellers while reducing the urban heat island effect and creating green spaces in the concrete jungle.\",\n        growingMethods: \"We use a combination of container gardening and raised beds with organic soil mixes specifically formulated for rooftop conditions. Our irrigation system collects and reuses rainwater, minimizing our environmental impact.\",\n        sustainabilityPractices: \"We compost all plant waste on-site, use solar panels to power our equipment, and deliver all produce within a 3-mile radius using electric cargo bikes to minimize our carbon footprint.\"\n    },\n    {\n        id: \"2\",\n        name: \"Vertical Harvest\",\n        slug: \"vertical-harvest\",\n        description: \"Indoor vertical farm growing herbs and microgreens year-round.\",\n        image: \"/placeholder.svg?height=550&width=800\",\n        location: \"Westside\",\n        address: \"456 Innovation Blvd, Westside, City\",\n        phone: \"(555) 987-6543\",\n        email: \"info@verticalharvestfarm.com\",\n        rating: 4.7,\n        reviewCount: 38,\n        story: \"Vertical Harvest was founded by a team of engineers and plant scientists who wanted to revolutionize urban agriculture. Our state-of-the-art vertical farming system allows us to grow fresh produce year-round regardless of weather conditions.\",\n        growingMethods: \"We use hydroponic systems with LED lighting optimized for plant growth. Our vertical setup allows us to grow 20 times more food per square foot than traditional farming while using 95% less water.\",\n        sustainabilityPractices: \"Our facility runs on 100% renewable energy, and we've eliminated the need for pesticides through careful environmental controls and beneficial insects for pest management.\"\n    },\n    {\n        id: \"3\",\n        name: \"Community Roots\",\n        slug: \"community-roots\",\n        description: \"Community-based farm focusing on culturally diverse vegetables.\",\n        image: \"/placeholder.svg?height=550&width=800\",\n        location: \"Eastside\",\n        address: \"789 Neighborhood St, Eastside, City\",\n        phone: \"(555) 456-7890\",\n        email: \"hello@communityroots.org\",\n        rating: 4.9,\n        reviewCount: 56,\n        story: \"Community Roots began as a neighborhood initiative to transform vacant lots into productive gardens. Today, we're a thriving urban farm that celebrates the cultural diversity of our community by growing vegetables used in cuisines from around the world.\",\n        growingMethods: \"We practice intensive organic farming methods, including companion planting, crop rotation, and season extension techniques. Our seeds are sourced from local seed savers and heirloom varieties.\",\n        sustainabilityPractices: \"We engage the community through volunteer programs, workshops, and a sliding-scale CSA program that ensures everyone in our neighborhood has access to fresh, healthy food regardless of income.\"\n    }\n];\n// Dummy products data\nconst dummyProducts = [\n    {\n        id: \"1\",\n        name: \"Heirloom Tomatoes\",\n        description: \"Colorful mix of heritage tomato varieties.\",\n        price: 4.99,\n        unit: \"lb\",\n        farmId: \"green-roof-gardens\",\n        image: \"/placeholder.svg?height=200&width=300\"\n    },\n    {\n        id: \"4\",\n        name: \"Organic Carrots\",\n        description: \"Sweet and crunchy carrots grown without pesticides.\",\n        price: 3.29,\n        unit: \"bunch\",\n        farmId: \"green-roof-gardens\",\n        image: \"/placeholder.svg?height=200&width=300\"\n    },\n    {\n        id: \"7\",\n        name: \"Bell Peppers\",\n        description: \"Colorful sweet peppers perfect for salads or cooking.\",\n        price: 1.99,\n        unit: \"each\",\n        farmId: \"green-roof-gardens\",\n        image: \"/placeholder.svg?height=200&width=300\"\n    },\n    {\n        id: \"2\",\n        name: \"Fresh Basil\",\n        description: \"Aromatic basil grown in vertical systems.\",\n        price: 2.99,\n        unit: \"bunch\",\n        farmId: \"vertical-harvest\",\n        image: \"/placeholder.svg?height=200&width=300\"\n    },\n    {\n        id: \"5\",\n        name: \"Microgreens Mix\",\n        description: \"Nutrient-dense assortment of young seedlings.\",\n        price: 5.99,\n        unit: \"box\",\n        farmId: \"vertical-harvest\",\n        image: \"/placeholder.svg?height=200&width=300\"\n    },\n    {\n        id: \"8\",\n        name: \"Fresh Mint\",\n        description: \"Aromatic mint for teas, cocktails, and cooking.\",\n        price: 2.49,\n        unit: \"bunch\",\n        farmId: \"vertical-harvest\",\n        image: \"/placeholder.svg?height=200&width=300\"\n    },\n    {\n        id: \"3\",\n        name: \"Baby Bok Choy\",\n        description: \"Tender Asian greens harvested young.\",\n        price: 3.49,\n        unit: \"bundle\",\n        farmId: \"community-roots\",\n        image: \"/placeholder.svg?height=200&width=300\"\n    },\n    {\n        id: \"6\",\n        name: \"Butterhead Lettuce\",\n        description: \"Tender lettuce with a buttery texture.\",\n        price: 2.79,\n        unit: \"head\",\n        farmId: \"community-roots\",\n        image: \"/placeholder.svg?height=200&width=300\"\n    },\n    {\n        id: \"9\",\n        name: \"Japanese Cucumbers\",\n        description: \"Crisp, thin-skinned cucumbers with few seeds.\",\n        price: 3.99,\n        unit: \"lb\",\n        farmId: \"community-roots\",\n        image: \"/placeholder.svg?height=200&width=300\"\n    }\n];\nconst useFarmStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((set, get)=>({\n        farms: dummyFarms,\n        products: dummyProducts,\n        getFarmBySlug: (slug)=>{\n            return get().farms.find((farm)=>farm.slug === slug);\n        },\n        getProductsByFarm: (slug)=>{\n            return get().products.filter((product)=>product.farmId === slug);\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/store.ts\n"));

/***/ })

});